define("./workbox-63eb47e3.js",["exports"],(function(e){"use strict";try{self["workbox:core:6.1.1"]&&_()}catch(e){}const t=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},a=function(a,r){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===a&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[a](...r);const s=e?[]:["%cworkbox",[`background: ${t[a]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[a](...s,...r),"groupCollapsed"===a&&(e=!0),"groupEnd"===a&&(e=!1)},r={},s=Object.keys(t);for(const e of s){const t=e;r[t]=(...e)=>{a(t,e)}}return r})(),a={"invalid-value":({paramName:e,validValueDescription:t,value:a})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(a)}.`},"not-an-array":({moduleName:e,className:t,funcName:a,paramName:r})=>{if(!(e&&t&&a&&r))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${r}' passed into '${e}.${t}.${a}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:a,className:r,funcName:s})=>{if(!(e&&t&&a&&s))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${a}.${r?r+".":""}${s}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:a,className:r,funcName:s,isReturnValueProblem:n})=>{if(!e||!a||!s)throw new Error("Unexpected input to 'incorrect-class' error.");return n?`The return value from '${a}.${r?r+".":""}${s}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${a}.${r?r+".":""}${s}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:a,className:r,funcName:s})=>{if(!(e&&t&&a&&r&&s))throw new Error("Unexpected input to 'missing-a-method' error.");return`${a}.${r}.${s}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e._entryId} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:a,paramName:r})=>`The supplied '${r}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${a} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:a,className:r,funcName:s,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${a}.${r}.${s}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:a})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${a}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:a})=>`You must define either config.statuses or config.headersin ${e}.${t}.${a}`,"invalid-string":({moduleName:e,funcName:t,paramName:a})=>{if(!a||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${a}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:a})=>`The start (${t}) and end (${a}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let a=`The strategy could not generate a response for '${e}'.`;return t&&(a+=` The underlying error is ${t}.`),a},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`},r=(e,t={})=>{const r=a[e];if(!r)throw new Error(`Unable to find message for code '${e}'.`);return r(t)};class s extends Error{constructor(e,t){super(r(e,t)),this.name=e,this.details=t}}const n=(e,t,a)=>{if("function"!==typeof e[t])throw a.expectedMethod=t,new s("missing-a-method",a)},o=(e,t)=>{if(!Array.isArray(e))throw new s("not-an-array",t)},i=(e,t,a)=>{if(!(e instanceof t))throw a.expectedClass=t,new s("incorrect-class",a)},c=(e,t,a)=>{if(!t.includes(e))throw a.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new s("invalid-value",a)},u=(e,t,a)=>{if(typeof e!==t)throw a.expectedType=t,new s("incorrect-type",a)};try{self["workbox:routing:6.1.1"]&&_()}catch(e){}const h=["DELETE","GET","HEAD","PATCH","POST","PUT"],l=e=>e&&"object"==typeof e?(n(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(u(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class d{constructor(e,t,a="GET"){u(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),a&&c(a,h,{paramName:"method"}),this.handler=l(t),this.match=e,this.method=a}setCatchHandler(e){this.catchHandler=l(e)}}class m extends d{constructor(e,a,r){i(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});super((({url:a})=>{const r=e.exec(a.href);if(r){if(a.origin===location.origin||0===r.index)return r.slice(1);t.debug(`The regular expression '${e}' only partially matched against the cross-origin URL '${a}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}}),a,r)}}const p=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");class g{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,a=this.handleRequest({request:t,event:e});a&&e.respondWith(a)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:a}=e.data;t.debug("Caching URLs from the window",a.urlsToCache);const r=Promise.all(a.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const a=new Request(...t);return this.handleRequest({request:a,event:e})})));e.waitUntil(r),e.ports&&e.ports[0]&&r.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:a}){i(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const r=new URL(e.url,location.href);if(!r.protocol.startsWith("http"))return void t.debug("Workbox Router only supports URLs that start with 'http'.");const s=r.origin===location.origin,{params:n,route:o}=this.findMatchingRoute({event:a,request:e,sameOrigin:s,url:r});let c=o&&o.handler;const u=[];c&&(u.push(["Found a route to handle this request:",o]),n&&u.push(["Passing the following params to the route's handler:",n]));const h=e.method;if(!c&&this._defaultHandlerMap.has(h)&&(u.push(`Failed to find a matching route. Falling back to the default handler for ${h}.`),c=this._defaultHandlerMap.get(h)),!c)return void t.debug(`No route found for: ${p(r)}`);let l;t.groupCollapsed(`Router is responding to: ${p(r)}`),u.forEach((e=>{Array.isArray(e)?t.log(...e):t.log(e)})),t.groupEnd();try{l=c.handle({url:r,request:e,event:a,params:n})}catch(e){l=Promise.reject(e)}const d=o&&o.catchHandler;return l instanceof Promise&&(this._catchHandler||d)&&(l=l.catch((async s=>{if(d){t.groupCollapsed(`Error thrown when responding to:  ${p(r)}. Falling back to route's Catch Handler.`),t.error("Error thrown by:",o),t.error(s),t.groupEnd();try{return await d.handle({url:r,request:e,event:a,params:n})}catch(e){s=e}}if(this._catchHandler)return t.groupCollapsed(`Error thrown when responding to:  ${p(r)}. Falling back to global Catch Handler.`),t.error("Error thrown by:",o),t.error(s),t.groupEnd(),this._catchHandler.handle({url:r,request:e,event:a});throw s}))),l}findMatchingRoute({url:e,sameOrigin:a,request:r,event:s}){const n=this._routes.get(r.method)||[];for(const o of n){let n;const i=o.match({url:e,sameOrigin:a,request:r,event:s});if(i)return i instanceof Promise&&t.warn(`While routing ${p(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,o),n=i,(Array.isArray(i)&&0===i.length||i.constructor===Object&&0===Object.keys(i).length||"boolean"==typeof i)&&(n=void 0),{route:o,params:n}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,l(e))}setCatchHandler(e){this._catchHandler=l(e)}registerRoute(e){u(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),n(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),u(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),n(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),u(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new s("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new s("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let f;const w=()=>(f||(f=new g,f.addFetchListener(),f.addCacheListener()),f);function y(e,a,r){let n;if("string"==typeof e){const o=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new s("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const a=e.startsWith("http")?o.pathname:e,r="[*:?+]";new RegExp(`${r}`).exec(a)&&t.debug(`The '$capture' parameter contains an Express-style wildcard character (${r}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}n=new d((({url:a})=>(a.pathname===o.pathname&&a.origin!==o.origin&&t.debug(`${e} only partially matches the cross-origin URL ${a}. This route will only handle cross-origin requests if they match the entire URL.`),a.href===o.href)),a,r)}else if(e instanceof RegExp)n=new m(e,a,r);else if("function"==typeof e)n=new d(e,a,r);else{if(!(e instanceof d))throw new s("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});n=e}return w().registerRoute(n),n}const b={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},N=e=>[b.prefix,e,b.suffix].filter((e=>e&&e.length>0)).join("-"),x=e=>e||N(b.googleAnalytics),q=e=>e||N(b.precache),R=e=>e||N(b.runtime);function v(e){e.then((()=>{}))}const k=new Set;class E{constructor(e,t,{onupgradeneeded:a,onversionchange:r}={}){this._db=null,this._name=e,this._version=t,this._onupgradeneeded=a,this._onversionchange=r||(()=>this.close())}get db(){return this._db}async open(){if(!this._db)return this._db=await new Promise(((e,t)=>{let a=!1;setTimeout((()=>{a=!0,t(new Error("The open request was blocked and timed out"))}),this.OPEN_TIMEOUT);const r=indexedDB.open(this._name,this._version);r.onerror=()=>t(r.error),r.onupgradeneeded=e=>{a?(r.transaction.abort(),r.result.close()):"function"==typeof this._onupgradeneeded&&this._onupgradeneeded(e)},r.onsuccess=()=>{const t=r.result;a?t.close():(t.onversionchange=this._onversionchange.bind(this),e(t))}})),this}async getKey(e,t){return(await this.getAllKeys(e,t,1))[0]}async getAll(e,t,a){return await this.getAllMatching(e,{query:t,count:a})}async getAllKeys(e,t,a){return(await this.getAllMatching(e,{query:t,count:a,includeKeys:!0})).map((e=>e.key))}async getAllMatching(e,{index:t,query:a=null,direction:r="next",count:s,includeKeys:n=!1}={}){return await this.transaction([e],"readonly",((o,i)=>{const c=o.objectStore(e),u=t?c.index(t):c,h=[],l=u.openCursor(a,r);l.onsuccess=()=>{const e=l.result;e?(h.push(n?e:e.value),s&&h.length>=s?i(h):e.continue()):i(h)}}))}async transaction(e,t,a){return await this.open(),await new Promise(((r,s)=>{const n=this._db.transaction(e,t);n.onabort=()=>s(n.error),n.oncomplete=()=>r(),a(n,(e=>r(e)))}))}async _call(e,t,a,...r){return await this.transaction([t],a,((a,s)=>{const n=a.objectStore(t),o=n[e].apply(n,r);o.onsuccess=()=>s(o.result)}))}close(){this._db&&(this._db.close(),this._db=null)}}E.prototype.OPEN_TIMEOUT=2e3;const $={readonly:["get","count","getKey","getAll","getAllKeys"],readwrite:["add","put","clear","delete"]};for(const[e,t]of Object.entries($))for(const a of t)a in IDBObjectStore.prototype&&(E.prototype[a]=async function(t,...r){return await this._call(a,t,e,...r)});try{self["workbox:expiration:6.1.1"]&&_()}catch(e){}const T="cache-entries",C=e=>{const t=new URL(e,location.href);return t.hash="",t.href};class U{constructor(e){this._cacheName=e,this._db=new E("workbox-expiration",1,{onupgradeneeded:e=>this._handleUpgrade(e)})}_handleUpgrade(e){const t=e.target.result.createObjectStore(T,{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1}),(async e=>{await new Promise(((t,a)=>{const r=indexedDB.deleteDatabase(e);r.onerror=()=>{a(r.error)},r.onblocked=()=>{a(new Error("Delete blocked"))},r.onsuccess=()=>{t()}}))})(this._cacheName)}async setTimestamp(e,t){const a={url:e=C(e),timestamp:t,cacheName:this._cacheName,id:this._getId(e)};await this._db.put(T,a)}async getTimestamp(e){return(await this._db.get(T,this._getId(e))).timestamp}async expireEntries(e,t){const a=await this._db.transaction(T,"readwrite",((a,r)=>{const s=a.objectStore(T).index("timestamp").openCursor(null,"prev"),n=[];let o=0;s.onsuccess=()=>{const a=s.result;if(a){const r=a.value;r.cacheName===this._cacheName&&(e&&r.timestamp<e||t&&o>=t?n.push(a.value):o++),a.continue()}else r(n)}})),r=[];for(const e of a)await this._db.delete(T,e.id),r.push(e.url);return r}_getId(e){return this._cacheName+"|"+C(e)}}class S{constructor(e,t={}){if(this._isRunning=!1,this._rerunRequested=!1,u(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"cacheName"}),!t.maxEntries&&!t.maxAgeSeconds)throw new s("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor"});t.maxEntries&&u(t.maxEntries,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxEntries"}),t.maxAgeSeconds&&u(t.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._maxEntries=t.maxEntries,this._maxAgeSeconds=t.maxAgeSeconds,this._matchOptions=t.matchOptions,this._cacheName=e,this._timestampModel=new U(e)}async expireEntries(){if(this._isRunning)return void(this._rerunRequested=!0);this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-1e3*this._maxAgeSeconds:0,a=await this._timestampModel.expireEntries(e,this._maxEntries),r=await self.caches.open(this._cacheName);for(const e of a)await r.delete(e,this._matchOptions);a.length>0?(t.groupCollapsed(`Expired ${a.length} `+(1===a.length?"entry":"entries")+" and removed "+(1===a.length?"it":"them")+" from the "+`'${this._cacheName}' cache.`),t.log(`Expired the following ${1===a.length?"URL":"URLs"}:`),a.forEach((e=>t.log(`    ${e}`))),t.groupEnd()):t.debug("Cache expiration ran and found no entries to remove."),this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,v(this.expireEntries()))}async updateTimestamp(e){u(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"updateTimestamp",paramName:"url"}),await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){return await this._timestampModel.getTimestamp(e)<Date.now()-1e3*this._maxAgeSeconds}throw new s("expired-test-without-max-age",{methodName:"isURLExpired",paramName:"maxAgeSeconds"})}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}function L(){return(L=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}function P(e,t){const a=new URL(e);for(const e of t)a.searchParams.delete(e);return a.href}class A{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}function D(e){return new Promise((t=>setTimeout(t,e)))}try{self["workbox:strategies:6.1.1"]&&_()}catch(e){}function O(e){return"string"==typeof e?new Request(e):e}class K{constructor(e,t){this._cacheKeys={},i(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new A,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}fetch(e){return this.waitUntil((async()=>{const{event:a}=this;let r=O(e);if("navigate"===r.mode&&a instanceof FetchEvent&&a.preloadResponse){const e=await a.preloadResponse;if(e)return t.log(`Using a preloaded navigation response for '${p(r.url)}'`),e}const n=this.hasCallback("fetchDidFail")?r.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))r=await e({request:r.clone(),event:a})}catch(e){throw new s("plugin-error-request-will-fetch",{thrownError:e})}const o=r.clone();try{let e;e=await fetch(r,"navigate"===r.mode?void 0:this._strategy.fetchOptions),t.debug(`Network request for '${p(r.url)}' returned a response with status '${e.status}'.`);for(const t of this.iterateCallbacks("fetchDidSucceed"))e=await t({event:a,request:o,response:e});return e}catch(e){throw t.error(`Network request for '${p(r.url)}' threw an error.`,e),n&&await this.runCallbacks("fetchDidFail",{error:e,event:a,originalRequest:n.clone(),request:o.clone()}),e}})())}async fetchAndCachePut(e){const t=await this.fetch(e),a=t.clone();return this.waitUntil(this.cachePut(e,a)),t}cacheMatch(e){return this.waitUntil((async()=>{const a=O(e);let r;const{cacheName:s,matchOptions:n}=this._strategy,o=await this.getCacheKey(a,"read"),i=L({},n,{cacheName:s});r=await caches.match(o,i),r?t.debug(`Found a cached response in '${s}'.`):t.debug(`No cached response found in '${s}'.`);for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))r=await e({cacheName:s,matchOptions:n,cachedResponse:r,request:o,event:this.event})||void 0;return r})())}async cachePut(e,a){const r=O(e);await D(0);const n=await this.getCacheKey(r,"write");if(n.method&&"GET"!==n.method)throw new s("attempt-to-cache-non-get-request",{url:p(n.url),method:n.method});if(!a)throw t.error(`Cannot cache non-existent response for '${p(n.url)}'.`),new s("cache-put-with-no-response",{url:p(n.url)});const o=await this._ensureResponseSafeToCache(a);if(!o)return t.debug(`Response '${p(n.url)}' will not be cached.`,o),!1;const{cacheName:i,matchOptions:c}=this._strategy,u=await self.caches.open(i),h=this.hasCallback("cacheDidUpdate"),l=h?await async function(e,t,a,r){const s=P(t.url,a);if(t.url===s)return e.match(t,r);const n=L({},r,{ignoreSearch:!0}),o=await e.keys(t,n);for(const t of o)if(s===P(t.url,a))return e.match(t,r)}(u,n.clone(),["__WB_REVISION__"],c):null;t.debug(`Updating the '${i}' cache with a new Response for ${p(n.url)}.`);try{await u.put(n,h?o.clone():o)}catch(e){throw"QuotaExceededError"===e.name&&await async function(){t.log(`About to run ${k.size} callbacks to clean up caches.`);for(const e of k)await e(),t.log(e,"is complete.");t.log("Finished running callbacks.")}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:i,oldResponse:l,newResponse:o.clone(),request:n,event:this.event});return!0}async getCacheKey(e,t){if(!this._cacheKeys[t]){let a=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))a=O(await e({mode:t,request:a,event:this.event,params:this.params}));this._cacheKeys[t]=a}return this._cacheKeys[t]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const a of this.iterateCallbacks(e))await a(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const a=this._pluginStateMap.get(t),r=r=>{const s=L({},r,{state:a});return t[e](s)};yield r}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve()}async _ensureResponseSafeToCache(e){let a=e,r=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(a=await e({request:this.request,response:a,event:this.event})||void 0,r=!0,!a)break;return r||(a&&200!==a.status&&(a=void 0),a&&200!==a.status&&(0===a.status?t.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):t.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),a}}class M{constructor(e={}){this.cacheName=R(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,a="string"==typeof e.request?new Request(e.request):e.request,r="params"in e?e.params:void 0,s=new K(this,{event:t,request:a,params:r}),n=this._getResponse(s,a,t);return[n,this._awaitComplete(n,s,a,t)]}async _getResponse(e,a,r){let n;await e.runCallbacks("handlerWillStart",{event:r,request:a});try{if(n=await this._handle(a,e),!n||"error"===n.type)throw new s("no-response",{url:a.url})}catch(s){for(const t of e.iterateCallbacks("handlerDidError"))if(n=await t({error:s,event:r,request:a}),n)break;if(!n)throw s;t.log(`While responding to '${p(a.url)}', an ${s} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const t of e.iterateCallbacks("handlerWillRespond"))n=await t({event:r,request:a,response:n});return n}async _awaitComplete(e,t,a,r){let s,n;try{s=await e}catch(n){}try{await t.runCallbacks("handlerDidRespond",{event:r,request:a,response:s}),await t.doneWaiting()}catch(e){n=e}if(await t.runCallbacks("handlerDidComplete",{event:r,request:a,response:s,error:n}),t.destroy(),n)throw n}}const j=(e,t)=>`Using ${e} to respond to '${p(t.url)}'`,I=e=>{e&&(t.groupCollapsed("View the final response here."),t.log(e||"[No response returned]"),t.groupEnd())};function W(e,t){const a=t();return e.waitUntil(a),a}try{self["workbox:precaching:6.1.1"]&&_()}catch(e){}function F(e){if(!e)throw new s("add-to-cache-list-unexpected-type",{entry:e});if("string"==typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:t,url:a}=e;if(!a)throw new s("add-to-cache-list-unexpected-type",{entry:e});if(!t){const e=new URL(a,location.href);return{cacheKey:e.href,url:e.href}}const r=new URL(a,location.href),n=new URL(a,location.href);return r.searchParams.set("__WB_REVISION__",t),{cacheKey:r.href,url:n.href}}class H{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:a})=>{if("install"===e.type){const e=t.originalRequest.url;a?this.notUpdatedURLs.push(e):this.updatedURLs.push(e)}return a}}}class B{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:e,params:t})=>{const a=t&&t.cacheKey||this._precacheController.getCacheKeyForURL(e.url);return a?new Request(a):e},this._precacheController=e}}function G(e){const a=e.length;a>0&&(t.groupCollapsed(`During precaching cleanup, ${a} cached request${1===a?" was":"s were"} deleted.`),((e,a)=>{t.groupCollapsed(e);for(const e of a)t.log(e);t.groupEnd()})("Deleted Cache Requests",e),t.groupEnd())}function V(e,a){if(0!==a.length){t.groupCollapsed(e);for(const e of a)t.log(e);t.groupEnd()}}let Q,z;async function Y(e,t){let a=null;if(e.url){a=new URL(e.url).origin}if(a!==self.location.origin)throw new s("cross-origin-copy-response",{origin:a});const r=e.clone(),n={headers:new Headers(r.headers),status:r.status,statusText:r.statusText},o=t?t(n):n,i=function(){if(void 0===Q){const e=new Response("");if("body"in e)try{new Response(e.body),Q=!0}catch(e){Q=!1}Q=!1}return Q}()?r.body:await r.blob();return new Response(i,o)}class J extends M{constructor(e={}){e.cacheName=q(e.cacheName),super(e),this._fallbackToNetwork=!1!==e.fallbackToNetwork,this.plugins.push(J.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const a=await t.cacheMatch(e);return a||(t.event&&"install"===t.event.type?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,a){let r;if(!this._fallbackToNetwork)throw new s("missing-precache-entry",{cacheName:this.cacheName,url:e.url});t.warn(`The precached response for ${p(e.url)} in ${this.cacheName} was not found. Falling back to the network instead.`),r=await a.fetch(e);{const s=a.params&&a.params.cacheKey||await a.getCacheKey(e,"read");t.groupCollapsed("Precaching is responding to: "+p(e.url)),t.log(`Serving the precached url: ${p(s.url)}`),t.groupCollapsed("View request details here."),t.log(e),t.groupEnd(),t.groupCollapsed("View response details here."),t.log(r),t.groupEnd(),t.groupEnd()}return r}async _handleInstall(e,t){this._useDefaultCacheabilityPluginIfNeeded();const a=await t.fetch(e);if(!await t.cachePut(e,a.clone()))throw new s("bad-precaching-response",{url:e.url,status:a.status});return a}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[a,r]of this.plugins.entries())r!==J.copyRedirectedCacheableResponsesPlugin&&(r===J.defaultPrecacheCacheabilityPlugin&&(e=a),r.cacheWillUpdate&&t++);0===t?this.plugins.push(J.defaultPrecacheCacheabilityPlugin):t>1&&null!==e&&this.plugins.splice(e,1)}}J.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:e})=>!e||e.status>=400?null:e},J.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:e})=>e.redirected?await Y(e):e};class X{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:a=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new J({cacheName:q(e),plugins:[...t,new B({precacheController:this})],fallbackToNetwork:a}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){o(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const a=[];for(const r of e){"string"==typeof r?a.push(r):r&&void 0===r.revision&&a.push(r.url);const{cacheKey:e,url:n}=F(r),o="string"!=typeof r&&r.revision?"reload":"default";if(this._urlsToCacheKeys.has(n)&&this._urlsToCacheKeys.get(n)!==e)throw new s("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(n),secondEntry:e});if("string"!=typeof r&&r.integrity){if(this._cacheKeysToIntegrities.has(e)&&this._cacheKeysToIntegrities.get(e)!==r.integrity)throw new s("add-to-cache-list-conflicting-integrities",{url:n});this._cacheKeysToIntegrities.set(e,r.integrity)}if(this._urlsToCacheKeys.set(n,e),this._urlsToCacheModes.set(n,o),a.length>0){const e=`Workbox is precaching URLs without revision info: ${a.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;t.warn(e)}}}install(e){return W(e,(async()=>{const a=new H;this.strategy.plugins.push(a);for(const[t,a]of this._urlsToCacheKeys){const r=this._cacheKeysToIntegrities.get(a),s=this._urlsToCacheModes.get(t),n=new Request(t,{integrity:r,cache:s,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:a},request:n,event:e}))}const{updatedURLs:r,notUpdatedURLs:s}=a;return function(e,a){const r=e.length,s=a.length;if(r||s){let n=`Precaching ${r} file${1===r?"":"s"}.`;s>0&&(n+=` ${s} file${1===s?" is":"s are"} already cached.`),t.groupCollapsed(n),V("View newly precached URLs.",e),V("View previously precached URLs.",a),t.groupEnd()}}(r,s),{updatedURLs:r,notUpdatedURLs:s}}))}activate(e){return W(e,(async()=>{const e=await self.caches.open(this.strategy.cacheName),t=await e.keys(),a=new Set(this._urlsToCacheKeys.values()),r=[];for(const s of t)a.has(s.url)||(await e.delete(s),r.push(s.url));return G(r),{deletedURLs:r}}))}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}async matchPrecache(e){const t=e instanceof Request?e.url:e,a=this.getCacheKeyForURL(t);if(a){return(await self.caches.open(this.strategy.cacheName)).match(a)}}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new s("non-precached-url",{url:e});return a=>(a.request=new Request(e),a.params=L({cacheKey:t},a.params),this.strategy.handle(a))}}const Z=()=>(z||(z=new X),z);class ee extends d{constructor(e,a){super((({request:r})=>{const s=e.getURLsToCacheKeys();for(const e of function*(e,{ignoreURLParametersMatching:t=[/^utm_/,/^fbclid$/],directoryIndex:a="index.html",cleanURLs:r=!0,urlManipulation:s}={}){const n=new URL(e,location.href);n.hash="",yield n.href;const o=function(e,t=[]){for(const a of[...e.searchParams.keys()])t.some((e=>e.test(a)))&&e.searchParams.delete(a);return e}(n,t);if(yield o.href,a&&o.pathname.endsWith("/")){const e=new URL(o.href);e.pathname+=a,yield e.href}if(r){const e=new URL(o.href);e.pathname+=".html",yield e.href}if(s){const e=s({url:n});for(const t of e)yield t.href}}(r.url,a)){const t=s.get(e);if(t)return{cacheKey:t}}t.debug("Precaching did not find a match for "+p(r.url))}),e.strategy)}}try{self["workbox:background-sync:6.1.1"]&&_()}catch(e){}const te="requests",ae="queueName";class re{constructor(e){this._queueName=e,this._db=new E("workbox-background-sync",3,{onupgradeneeded:this._upgradeDb})}async pushEntry(e){u(e,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"pushEntry",paramName:"entry"}),u(e.requestData,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"pushEntry",paramName:"entry.requestData"}),delete e.id,e.queueName=this._queueName,await this._db.add(te,e)}async unshiftEntry(e){u(e,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"unshiftEntry",paramName:"entry"}),u(e.requestData,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"unshiftEntry",paramName:"entry.requestData"});const[t]=await this._db.getAllMatching(te,{count:1});t?e.id=t.id-1:delete e.id,e.queueName=this._queueName,await this._db.add(te,e)}async popEntry(){return this._removeEntry({direction:"prev"})}async shiftEntry(){return this._removeEntry({direction:"next"})}async getAll(){return await this._db.getAllMatching(te,{index:ae,query:IDBKeyRange.only(this._queueName)})}async deleteEntry(e){await this._db.delete(te,e)}async _removeEntry({direction:e}){const[t]=await this._db.getAllMatching(te,{direction:e,index:ae,query:IDBKeyRange.only(this._queueName),count:1});if(t)return await this.deleteEntry(t.id),t}_upgradeDb(e){const t=e.target.result;e.oldVersion>0&&e.oldVersion<3&&t.objectStoreNames.contains(te)&&t.deleteObjectStore(te);t.createObjectStore(te,{autoIncrement:!0,keyPath:"id"}).createIndex(ae,ae,{unique:!1})}}const se=["method","referrer","referrerPolicy","mode","credentials","cache","redirect","integrity","keepalive"];class ne{constructor(e){u(e,"object",{moduleName:"workbox-background-sync",className:"StorableRequest",funcName:"constructor",paramName:"requestData"}),u(e.url,"string",{moduleName:"workbox-background-sync",className:"StorableRequest",funcName:"constructor",paramName:"requestData.url"}),"navigate"===e.mode&&(e.mode="same-origin"),this._requestData=e}static async fromRequest(e){const t={url:e.url,headers:{}};"GET"!==e.method&&(t.body=await e.clone().arrayBuffer());for(const[a,r]of e.headers.entries())t.headers[a]=r;for(const a of se)void 0!==e[a]&&(t[a]=e[a]);return new ne(t)}toObject(){const e=Object.assign({},this._requestData);return e.headers=Object.assign({},this._requestData.headers),e.body&&(e.body=e.body.slice(0)),e}toRequest(){return new Request(this._requestData.url,this._requestData)}clone(){return new ne(this.toObject())}}const oe="workbox-background-sync",ie=new Set,ce=e=>{const t={request:new ne(e.requestData).toRequest(),timestamp:e.timestamp};return e.metadata&&(t.metadata=e.metadata),t};class ue{constructor(e,{onSync:t,maxRetentionTime:a}={}){if(this._syncInProgress=!1,this._requestsAddedDuringSync=!1,ie.has(e))throw new s("duplicate-queue-name",{name:e});ie.add(e),this._name=e,this._onSync=t||this.replayRequests,this._maxRetentionTime=a||10080,this._queueStore=new re(this._name),this._addSyncListener()}get name(){return this._name}async pushRequest(e){u(e,"object",{moduleName:"workbox-background-sync",className:"Queue",funcName:"pushRequest",paramName:"entry"}),i(e.request,Request,{moduleName:"workbox-background-sync",className:"Queue",funcName:"pushRequest",paramName:"entry.request"}),await this._addRequest(e,"push")}async unshiftRequest(e){u(e,"object",{moduleName:"workbox-background-sync",className:"Queue",funcName:"unshiftRequest",paramName:"entry"}),i(e.request,Request,{moduleName:"workbox-background-sync",className:"Queue",funcName:"unshiftRequest",paramName:"entry.request"}),await this._addRequest(e,"unshift")}async popRequest(){return this._removeRequest("pop")}async shiftRequest(){return this._removeRequest("shift")}async getAll(){const e=await this._queueStore.getAll(),t=Date.now(),a=[];for(const r of e){const e=60*this._maxRetentionTime*1e3;t-r.timestamp>e?await this._queueStore.deleteEntry(r.id):a.push(ce(r))}return a}async _addRequest({request:e,metadata:a,timestamp:r=Date.now()},s){const n={requestData:(await ne.fromRequest(e.clone())).toObject(),timestamp:r};a&&(n.metadata=a),await this._queueStore[`${s}Entry`](n),t.log(`Request for '${p(e.url)}' has been added to background sync queue '${this._name}'.`),this._syncInProgress?this._requestsAddedDuringSync=!0:await this.registerSync()}async _removeRequest(e){const t=Date.now(),a=await this._queueStore[`${e}Entry`]();if(a){const r=60*this._maxRetentionTime*1e3;return t-a.timestamp>r?this._removeRequest(e):ce(a)}}async replayRequests(){let e;for(;e=await this.shiftRequest();)try{await fetch(e.request.clone()),t.log(`Request for '${p(e.request.url)}' has been replayed in queue '${this._name}'`)}catch(a){throw await this.unshiftRequest(e),t.log(`Request for '${p(e.request.url)}' failed to replay, putting it back in queue '${this._name}'`),new s("queue-replay-failed",{name:this._name})}t.log(`All requests in queue '${this.name}' have successfully replayed; the queue is now empty!`)}async registerSync(){if("sync"in self.registration)try{await self.registration.sync.register(`${oe}:${this._name}`)}catch(e){t.warn(`Unable to register sync event for '${this._name}'.`,e)}}_addSyncListener(){"sync"in self.registration?self.addEventListener("sync",(e=>{if(e.tag===`${oe}:${this._name}`){t.log(`Background sync for tag '${e.tag}' has been received`);const a=async()=>{let t;this._syncInProgress=!0;try{await this._onSync({queue:this})}catch(e){throw t=e,t}finally{!this._requestsAddedDuringSync||t&&!e.lastChance||await this.registerSync(),this._syncInProgress=!1,this._requestsAddedDuringSync=!1}};e.waitUntil(a())}})):(t.log("Background sync replaying without background sync event"),this._onSync({queue:this}))}static get _queueNames(){return ie}}class he{constructor(e,t){this.fetchDidFail=async({request:e})=>{await this._queue.pushRequest({request:e})},this._queue=new ue(e,t)}}const le={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null};class de extends M{constructor(e={}){super(e),this.plugins.some((e=>"cacheWillUpdate"in e))||this.plugins.unshift(le),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0,this._networkTimeoutSeconds&&u(this._networkTimeoutSeconds,"number",{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"constructor",paramName:"networkTimeoutSeconds"})}async _handle(e,a){const r=[];i(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"makeRequest"});const n=[];let o;if(this._networkTimeoutSeconds){const{id:t,promise:s}=this._getTimeoutPromise({request:e,logs:r,handler:a});o=t,n.push(s)}const c=this._getNetworkPromise({timeoutId:o,request:e,logs:r,handler:a});n.push(c);const u=await a.waitUntil((async()=>await a.waitUntil(Promise.race(n))||await c)());t.groupCollapsed(j(this.constructor.name,e));for(const e of r)t.log(e);if(I(u),t.groupEnd(),!u)throw new s("no-response",{url:e.url});return u}_getTimeoutPromise({request:e,logs:t,handler:a}){let r;return{promise:new Promise((s=>{r=setTimeout((async()=>{t.push(`Timing out the network response at ${this._networkTimeoutSeconds} seconds.`),s(await a.cacheMatch(e))}),1e3*this._networkTimeoutSeconds)})),id:r}}async _getNetworkPromise({timeoutId:e,request:t,logs:a,handler:r}){let s,n;try{n=await r.fetchAndCachePut(t)}catch(e){s=e}return e&&clearTimeout(e),n?a.push("Got response from network."):a.push("Unable to get a response from the network. Will respond with a cached response."),!s&&n||(n=await r.cacheMatch(t),n?a.push(`Found a cached response in the '${this.cacheName}' cache.`):a.push(`No response found in the '${this.cacheName}' cache.`)),n}}class me extends M{constructor(e={}){super(e),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0}async _handle(e,a){let r,n;i(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"_handle",paramName:"request"});try{const t=[a.fetch(e)];if(this._networkTimeoutSeconds){const e=D(1e3*this._networkTimeoutSeconds);t.push(e)}if(n=await Promise.race(t),!n)throw new Error(`Timed out the network response after ${this._networkTimeoutSeconds} seconds.`)}catch(e){r=e}if(t.groupCollapsed(j(this.constructor.name,e)),n?t.log("Got response from network."):t.log("Unable to get a response from the network."),I(n),t.groupEnd(),!n)throw new s("no-response",{url:e.url,error:r});return n}}try{self["workbox:google-analytics:6.1.1"]&&_()}catch(e){}const pe="www.google-analytics.com",ge="www.googletagmanager.com",fe=/^\/(\w+\/)?collect/,we=e=>{const t=({url:e})=>e.hostname===pe&&fe.test(e.pathname),a=new me({plugins:[e]});return[new d(t,a,"GET"),new d(t,a,"POST")]},ye=e=>{const t=new de({cacheName:e});return new d((({url:e})=>e.hostname===pe&&"/analytics.js"===e.pathname),t,"GET")},be=e=>{const t=new de({cacheName:e});return new d((({url:e})=>e.hostname===ge&&"/gtag/js"===e.pathname),t,"GET")},Ne=e=>{const t=new de({cacheName:e});return new d((({url:e})=>e.hostname===ge&&"/gtm.js"===e.pathname),t,"GET")};e.CacheFirst=class extends M{async _handle(e,a){const r=[];i(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"makeRequest",paramName:"request"});let n,o=await a.cacheMatch(e);if(o)r.push(`Found a cached response in the '${this.cacheName}' cache.`);else{r.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);try{o=await a.fetchAndCachePut(e)}catch(e){n=e}o?r.push("Got response from network."):r.push("Unable to get a response from the network.")}t.groupCollapsed(j(this.constructor.name,e));for(const e of r)t.log(e);if(I(o),t.groupEnd(),!o)throw new s("no-response",{url:e.url,error:n});return o}},e.ExpirationPlugin=class{constructor(e={}){if(this.cachedResponseWillBeUsed=async({event:e,request:a,cacheName:r,cachedResponse:s})=>{if(!s)return null;const n=this._isResponseDateFresh(s),o=this._getCacheExpiration(r);v(o.expireEntries());const i=o.updateTimestamp(a.url);if(e)try{e.waitUntil(i)}catch(a){"request"in e&&t.warn(`Unable to ensure service worker stays alive when updating cache entry for '${p(e.request.url)}'.`)}return n?s:null},this.cacheDidUpdate=async({cacheName:e,request:t})=>{u(e,"string",{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"cacheName"}),i(t,Request,{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"request"});const a=this._getCacheExpiration(e);await a.updateTimestamp(t.url),await a.expireEntries()},!e.maxEntries&&!e.maxAgeSeconds)throw new s("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor"});var a;e.maxEntries&&u(e.maxEntries,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxEntries"}),e.maxAgeSeconds&&u(e.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&(u(a=()=>this.deleteCacheAndMetadata(),"function",{moduleName:"workbox-core",funcName:"register",paramName:"callback"}),k.add(a),t.log("Registered a callback to respond to quota errors.",a))}_getCacheExpiration(e){if(e===R())throw new s("expire-custom-caches-only");let t=this._cacheExpirations.get(e);return t||(t=new S(e,this._config),this._cacheExpirations.set(e,t)),t}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);if(null===t)return!0;return t>=Date.now()-1e3*this._maxAgeSeconds}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),a=new Date(t).getTime();return isNaN(a)?null:a}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}},e.clientsClaim=function(){self.addEventListener("activate",(()=>self.clients.claim()))},e.initialize=(e={})=>{const a=x(e.cacheName),r=new he("workbox-google-analytics",{maxRetentionTime:2880,onSync:(s=e,async({queue:e})=>{let a;for(;a=await e.shiftRequest();){const{request:r,timestamp:n}=a,o=new URL(r.url);try{const e="POST"===r.method?new URLSearchParams(await r.clone().text()):o.searchParams,a=n-(Number(e.get("qt"))||0),i=Date.now()-a;if(e.set("qt",String(i)),s.parameterOverrides)for(const t of Object.keys(s.parameterOverrides)){const a=s.parameterOverrides[t];e.set(t,a)}"function"==typeof s.hitFilter&&s.hitFilter.call(null,e),await fetch(new Request(o.origin+o.pathname,{body:e.toString(),method:"POST",mode:"cors",credentials:"omit",headers:{"Content-Type":"text/plain"}})),t.log(`Request for '${p(o.href)}' has been replayed`)}catch(r){throw await e.unshiftRequest(a),t.log(`Request for '${p(o.href)}' failed to replay, putting it back in the queue.`),r}}t.log("All Google Analytics request successfully replayed; the queue is now empty!")})});var s;const n=[Ne(a),ye(a),be(a),...we(r)],o=new g;for(const e of n)o.registerRoute(e);o.addFetchListener()},e.precacheAndRoute=function(e,t){!function(e){Z().precache(e)}(e),function(e){const t=Z();y(new ee(t,e))}(t)},e.registerRoute=y}));